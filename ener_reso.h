#include <math.h>
#include <stdio.h>

double par[13][7];
double ratio=0;
double par_f0[13][7]={                              // good 1.25
{ 0.350313, 0.883977, 2.13928, 0.285059, 0.503799, 0.211142, 20137},
{ 0.482034, 1.07226, 2.5805, 0.0998246, 0.570282, 0.329893, 4659},
{ 0.484384, 0.925612, 1.98245, 0.198369, 0.522118, 0.279514, 7110},
{ 0.403551, 0.873494, 2.03429, 0.535189, 0.420814, 0.0439977, 7061},
{ 0.278378, 0.153784, 0.845645, 0.706898, 0.260024, 0.0330778, 1307},
{ 1.13806, 1.13806, 4.68461, 0.658375, 0.0298959, 0.311729, 698},
{ 1.03934, 0.521661, 2.34005, 0.522431, 0.14879, 0.328779, 6175},
{ 0.876444, 0.453808, 1.83125, 0.532457, 0.224534, 0.24301, 6699},
{ 0.892664, 0.434955, 2.59285, 0.425403, 0.545194, 0.029403, 3636},
{ 0.759076, 0.344026, 10, 0.168652, 0.724236, 0.107113, 1940},
{ 1.09198, 0.243945, 10, 0.037996, 0.962004, 6.70275e-10, 721},
{ 0.234889, 0.141724, 9.938, 0.342591, 0.657376, 3.25841e-05, 268},
{ 0.342986, 2.12976, 0.876626, 0.281012, 0.212759, 0.506229, 20217}};
double par_f1[13][7]={                                      //all
{ 0.372072, 0.969695, 2.40284, 0.21403, 0.499709, 0.28626, 32250},
{ 0.551902, 1.12294, 2.66108, 0.091027, 0.511018, 0.397955, 15251},
{ 0.568468, 1.10944, 2.29457, 0.307565, 0.477712, 0.214724, 8528},
{ 0.86539, 1.96673, 0.402351, 0.426517, 0.0482353, 0.525248, 7164},
{ 0.153784, 0.84565, 0.278378, 0.260022, 0.0330779, 0.7069, 1307},
{ 0.606794, 2.72552, 1.14647, 0.0614971, 0.463796, 0.474707, 6721},
{ 0.578291, 2.59054, 1.14089, 0.167709, 0.316147, 0.516145, 11502},
{ 0.93389, 0.479595, 1.96683, 0.5273, 0.252587, 0.220113, 7424},
{ 2.51234, 0.436248, 0.895646, 0.0302024, 0.544874, 0.424924, 3674},
{ 10, 0.344025, 0.759075, 0.10711, 0.724235, 0.168655, 1940},
{ 10, 0.243945, 1.09199, 2.24651e-08, 0.962003, 0.0379971, 721},
{ 0.1, 0.165401, 0.343187, 0.11301, 0.75722, 0.129771, 268},
{ 0.963623, 0.365097, 2.39476, 0.501081, 0.211359, 0.287561, 32330}};

double par_f2[13][7]={                        //0.8-1.25

{ 0.695753, 1.26891, 2.87625, 0.174576, 0.461646, 0.363779, 12113},
{ 0.707153, 1.2496, 2.80166, 0.157431, 0.448257, 0.394313, 10592},
{ 0.651405, 1.3596, 5.03143, 0.242525, 0.53442, 0.223056, 1418},
{ 0.712879, 7.23461, 4.42732, 0.357543, 0.173238, 0.469219, 103},
{ 0.712879, 7.23461, 4.42732, 0.357543, 0.173238, 0.469219, 0},
{ 0.890662, 3.06322, 1.58234, 0.296776, 0.369589, 0.333635, 6023},
{ 0.663738, 3.07813, 1.28787, 0.191672, 0.285599, 0.522729, 5327},
{ 0.549235, 2.8303, 1.04903, 0.139685, 0.207075, 0.653241, 725},
{ 0.346929, 9.99911, 1.07871, 0.0162099, 0.919486, 0.0643042, 38},
{ 0.346929, 9.99911, 1.07871, 0.0162099, 0.919486, 0.0643042, 0},
{ 0.346929, 9.99911, 1.07871, 0.0162099, 0.919486, 0.0643042, 0},
{ 0.346929, 9.99911, 1.07871, 0.0162099, 0.919486, 0.0643042, 0},
{ 2.87621, 1.26889, 0.695736, 0.363783, 0.461654, 0.174563, 12113}};

double par_f3[13][7]={                    //out 1.25
{ 0.379388, 0.895439, 1.88772, 0.289211, 0.558275, 0.152515, 2076},
{ 0.232991, 1.13144, 3.20078, 0.0721802, 0.274676, 0.653144, 87},
{ 1.02575, 0.478366, 2.97115, 0.67084, 0.106819, 0.222341, 559},
{ 4.16688, 0.898966, 0.410755, 0.0683752, 0.59891, 0.332715, 1208},
{ 0.647855, 0.309215, 9.98847, 0.106805, 0.21498, 0.678215, 222},
{ 0.647855, 0.309215, 9.98847, 0.106805, 0.21498, 0.678215, 0},
{ 1.0899, 1.0899, 3.6252, 0.401413, 0.206178, 0.392409, 198},
{ 1.0359, 2.93462, 0.444889, 0.67205, 0.153968, 0.173983, 702},
{ 0.837386, 3.75512, 0.400022, 0.687835, 0.115156, 0.197009, 615},
{ 0.5742, 1.21275, 0.312353, 0.533848, 0.157675, 0.308477, 411},
{ 0.617401, 9.3255, 0.323254, 0.0563742, 0.813918, 0.129708, 104},
{ 4.8449, 9.98527, 0.421757, 5.72396e-08, 0.964149, 0.0358512, 46},
{ 0.894746, 1.88747, 0.380454, 0.556948, 0.151779, 0.291274, 2087}};

double par_f4[13][7]={                  //out 0.8-1.25
{ 0.597219, 1.31576, 4.02471, 0.228916, 0.634638, 0.136446, 881},
{ 0.746763, 1.37419, 5.54619, 0.0522617, 0.632657, 0.315081, 385},
{ 0.39015, 1.03989, 3.48473, 0.120798, 0.694021, 0.185181, 404},
{ 0.589957, 1.42953, 5.90223, 0.279847, 0.116285, 0.603869, 92},
{ 0.589957, 1.42953, 5.90223, 0.279847, 0.116285, 0.603869, 0},
{ 0.458559, 2.29272, 10, 0.0311984, 0.300086, 0.668716, 52},
{ 0.694867, 1.20083, 2.83446, 0.0428968, 0.693622, 0.263481, 491},
{ 0.577707, 1.224, 6.84668, 0.369673, 0.292545, 0.337782, 294},
{ 0.509157, 10, 2.07018, 0.096207, 0.782397, 0.121396, 44},
{ 0.509157, 10, 2.07018, 0.096207, 0.782397, 0.121396, 0},
{ 0.509157, 10, 2.07018, 0.096207, 0.782397, 0.121396, 0},
{ 0.509157, 10, 2.07018, 0.096207, 0.782397, 0.121396, 0},
{ 0.597225, 4.02455, 1.31576, 0.228915, 0.136447, 0.634638, 881}};


void gaus_init( int flag) {
  int i,j;
   if(flag==0) {
     for(i=0;i<13;i++)
       for(j=0;j<7;j++)
         par[i][j]=par_f0[i][j];

   }
   else if(flag==1) {
      for(i=0;i<13;i++)
       for(j=0;j<7;j++)
         par[i][j]=par_f1[i][j];
   }
   else if(flag==2) {
      for(i=0;i<13;i++)
       for(j=0;j<7;j++)
         par[i][j]=par_f2[i][j];
   }
   else if(flag==3) {
     for(i=0;i<13;i++)
       for(j=0;j<7;j++)
         par[i][j]=par_f3[i][j];
   }
      else if(flag==4) {
      for(i=0;i<13;i++)
       for(j=0;j<7;j++)
         par[i][j]=par_f4[i][j];
   }
   /*
   for(k=0;k<13;k++) {
     for(i=0;i<3;i++) {
       par[k][i]=sqrt(par[k][i]*par[k][i]+0.32*0.32);
       //   par[k][i]=sqrt(par[k][i]*par[k][i]+0.55*0.55);
     }
   }
   */
}


double opt_reso(int kk){
  kk-=100;
 double sigma1=par[kk][0],sigma2=par[kk][1],sigma3=par[kk][2];
  double alpha=par[kk][3], beta=par[kk][4],  gamma=par[kk][5];
 
  double x1=0.2;
  double x2=3;
  double y0=alpha+beta+gamma;
  double y=y0+1;
  double x;

while(fabs(y-y0)>1.e-3)
   {
     x=(x1+x2)/2.;
     y=alpha*exp(-x*x/(2*sigma1*sigma1))*(x*x/(sigma1*sigma1)+1)+beta*exp(-x*x/(2*sigma2*sigma2))*(x*x/(sigma2*sigma2)+1)+gamma*exp(-x*x/(2*sigma3*sigma3))*(x*x/(sigma3*sigma3)+1) ;
     if (y>=y0) x1=x; 
     else x2=x;  
   }
//x=0.9; 
 ratio=1-alpha*exp(-x*x/(2*sigma1*sigma1))-beta*exp(-x*x/(2*sigma2*sigma2))-gamma*exp(-x*x/(2*sigma3*sigma3));
 fprintf(stderr,"x=%f,y=%f,y0=%f ratio=%f\n",x,y,y0,ratio);   
 return x;

}
